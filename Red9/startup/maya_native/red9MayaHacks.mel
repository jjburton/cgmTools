/*
Created on 2 May 2013

------------------------------------------
Red9 Studio Pack: Maya Pipeline Solutions
Author: Mark Jackson
email: rednineinfo@gmail.com
------------------------------------------

These are simple procs that the hacked scripts call to add to 
their menu's. These are here so that I'm not hacking each script
separately, means I have 1 place to modify the calls for the future

Note to self!: menu calls should NOT use '-sourceType "python"' 
as this would then mean managing versions, 2011 and below has no
such arg in the menu calls
================================================================
*/


global proc red9HackChannelBox(string $parent)
{
	 //hack the ChannelBox RMB popup menu
	
	 menuItem -p $parent -d true;
	 menuItem -label ("Red9 : HUD")
	 	-subMenu true 
	 	-tearOff true
	 	-p $parent red9HUDsubmenu;
	 menuItem -label ("HUD: Monitor CB selection") 
		-p red9HUDsubmenu
		-ann "Add the selected ChannelBox attrs to the HUD node for monitoring"
		-c "python(\"import Red9.core.Red9_Meta as r9Meta;r9Meta.monitorHUDaddCBAttrs()\")" red9HUDaddStaticItem;
	 menuItem -label ("HUD: Remove CB selection") 
		-p red9HUDsubmenu
		-ann "Remove the selected ChannelBox attrs from the HUD"
		-c "python(\"import Red9.core.Red9_Meta as r9Meta;r9Meta.monitorHUDremoveCBAttrs()\")" red9HUDremoveItem;
	 menuItem -divider true -p red9HUDsubmenu;
	 menuItem -label ("HUD: Show as HeadsUp") 
		-p red9HUDsubmenu
		-ann "switch to standard Heads up data"
		-c "python(\"import Red9.core.Red9_Meta as r9Meta;r9Meta.monitorHUDManagement('refreshHeadsUp')\")" red9HUDrefreshHeadsUpItem;	
	 menuItem -label ("HUD: Show as Sliders") 
		-p red9HUDsubmenu
		-ann "switch the HUD mode to sliders"
		-c "python(\"import Red9.core.Red9_Meta as r9Meta;r9Meta.monitorHUDManagement('refreshSliders')\")" red9HUDrefreshSlidersItem;		 
	 menuItem -label ("HUD: Show Off") 
		-p red9HUDsubmenu
		-ann "turn off the HUD but leave the attrs wired to it"
		-c "python(\"import Red9.core.Red9_Meta as r9Meta;r9Meta.monitorHUDManagement('kill')\")" red9HUDkillItem;	
	 menuItem -divider true -p red9HUDsubmenu;
	 menuItem -label ("HUD: Delete") 
		-p red9HUDsubmenu
		-ann "destroy the HUD itself and cleanup"
		-c "python(\"import Red9.core.Red9_Meta as r9Meta;r9Meta.monitorHUDManagement('delete')\")" red9HUDdeleteItem;

	 menuItem -p $parent -d true;	
	 menuItem -label ("Red9 : CopyPaste Xforms")
	 	-subMenu true 
	 	-tearOff true
	 	-p $parent red9Clipboardsubmenu;
	 menuItem -label ("Red9: Copy Node Attrs") 
		-p red9Clipboardsubmenu
		-ann "Add the selected objects transform data to the clipboard"
		-c "python(\"import Red9.core.Red9_PoseSaver as r9Pose;r9Pose.store_nodepose_to_clipboard()\")" red9CBCopyItem;
	 menuItem -label ("Red9: Paste Node Attrs - All Attrs") 
		-p red9Clipboardsubmenu
		-ann "Paste the transform clipboard data to the selected object / selected channels"
		-c "python(\"import Red9.core.Red9_PoseSaver as r9Pose;r9Pose.apply_nodepose_from_clipboad(cb_selection=False, world_space=False)\")" red9CBPasteLocalItem;
	 menuItem -label ("Red9: Paste Node Attrs - All Attrs - WorldSpace") 
		-p red9Clipboardsubmenu
		-ann "Paste the transform clipboard data to the selected object / selected channels, transoform data is in WorldSpace"
		-c "python(\"import Red9.core.Red9_PoseSaver as r9Pose;r9Pose.apply_nodepose_from_clipboad(cb_selection=False, world_space=True)\")" red9CBPasteWorldItem;
	 menuItem -label ("Red9: Paste Node Attrs - Selected CBox") 
		-p red9Clipboardsubmenu
		-ann "Paste the transform clipboard data to the selected object + selected channels"
		-c "python(\"import Red9.core.Red9_PoseSaver as r9Pose;r9Pose.apply_nodepose_from_clipboad(cb_selection=True)\")" red9CBPaste2Item;

}


global proc red9HackGraphCurveMenu(string $parent)
{
	 //hack the GraphEditor 'curve' menu
	 menuItem -d true;
	 menuItem -label "Red9: Randomizer"
		-annotation "Add Noise to Curves"	
		-p $parent			
		-c "python(\"import Red9.core.Red9_AnimationUtils as r9Anim;r9Anim.RandomizeKeys().curveMenuFunc()\")"
		-dragMenuCommand "python(\"import Red9.core.Red9_AnimationUtils as r9Anim;r9Anim.RandomizeKeys().curveMenuFunc()\")"
		noiseItem;
	 menuItem -optionBox true
		-annotation "Noise Settings" 
		-p $parent
		-c "python(\"import Red9.core.Red9_AnimationUtils as r9Anim;r9Anim.RandomizeKeys.showOptions()\")"
		-dragMenuCommand "python(\"import Red9.core.Red9_AnimationUtils as r9Anim;r9Anim.RandomizeKeys.showOptions()\")"
		noiseOptionsItem;
	 menuItem -label "Red9: Interactive Simplify"
		-annotation "Interactively simplify and filter animCurves"	
		-p $parent			
		-c "python(\"import Red9.core.Red9_AnimationUtils as r9Anim;r9Anim.FilterCurves.show()\")"
		-dragMenuCommand "python(\"import Red9.core.Red9_AnimationUtils as r9Anim;r9Anim.FilterCurves.show()\")";
	 menuItem -label "Red9: Inverse Key Times"
		-annotation "Inverse the Selected key times around the centre pivot of those selected"	
		-p $parent			
		-c "python(\"import Red9.core.Red9_AnimationUtils as r9Anim;r9Anim.AnimFunctions.inverseAnimCurves(nodes=[], time=(), mode='keys')\")"
		-dragMenuCommand "python(\"import Red9.core.Red9_AnimationUtils as r9Anim;r9Anim.AnimFunctions.inverseAnimCurves(nodes=[], time=(), mode='keys')\")";
}


global proc red9HackScriptEditorPopup(string $parent)
{
	 //hack the ScriptEditor marking menu
	 
	 menuItem -radialPosition "SW" 
		 -parent $parent 
	 	 -label "Red9: InspectFunction"
	 	 -command "handleScriptEditorAction \"copy\";red9_InspectCode";
}


global proc red9HackTraxMenu()
{
	//hack Red9_Sound to the Trax Editor menuBar
	python("import Red9.startup.setup as r9Setup;r9Setup.addAudioMenu(parent=None, rootMenu='redNineTraxRoot')");
}

//global proc red9HackSequencerMenu()
//{
//	//hack Red9_Sound to the Trax Editor menuBar
//	python("import Red9.startup.setup as r9Setup;r9Setup.addAudioMenu(parent='sequenceEditorPanel1', rootMenu='redNineSequencerRoot')");
//}