/*
    Blend Shapes
	2.1

    Copyright (c) 2010 Bohdon Sayre
    All Rights Reserved.
    bo@bohdon.com

    unique prefix: bbs

    Description:
		This script contains the multi blend slider
        as well as a new inbetweener for blendshapes.

    Instructions:
        source boBlendShapes then run...
        bbsMultiBlendSlider; //opens the multi blend slider window
        bbsAddInbetween; //shows the inbetweener window
        bbsAddInbetweenAuto; //adds an inbetween automatically based on selection

    Version 2.1:
		> multi blend slider now handles mulitple blend shape bases being selected
		> multi blend slider is now a window, multiBlendHUDSlider has been removed
        > inbetweener window for auto or manual adding
        > multi blend tools include a slider and preset buttons

    Feel free to email me with any bugs, comments, or requests!
*/

//====================================================================================================
//MULTI BLEND SLIDER
global proc bbsMultiBlendSlider() {
    //window name
    $win = "bbsMultiBlendSliderWin";
    
    //check for pre-existing window
    if (`window -ex $win`) deleteUI -wnd $win;
    
    //create window
    window -w 100 -h 100 -rtf 1 -s 0 -tlb 1 -mb 1 -mxb 0 -t "Multi Blend Slider 2.1" -mnc ("window -e -t \"Multi Blend Slider 2.1\" "+$win+";") $win;
    
    //main layout
    formLayout -nd 100 bbsMultiBlendSliderForm;
        floatSliderGrp -field 1 -step .001 -minValue 0 -maxValue 1 -cw2 50 200
            -dc "bbsMultiBlendSlide(0)"
            -cc "bbsMultiBlendSlide(1)"
            bbsMultiBlendSliderSlider;
		$btn1 = `button -l "0" -al "center" -c "bbsMultiBlendSet(0, 1, 0)"`;
		$btn2 = `button -l ".333" -al "center" -c "bbsMultiBlendSet(.333333, 1, 0)"`;
		$btn3 = `button -l ".5" -al "center" -c "bbsMultiBlendSet(.5, 1, 0)"`;
		$btn4 = `button -l ".666" -al "center" -c "bbsMultiBlendSet(.666666, 1, 0)"`;
		$btn5 = `button -l "1" -al "center" -c "bbsMultiBlendSet(1, 1, 0)"`;
	
	formLayout -e
		-ap bbsMultiBlendSliderSlider "top" 1 0
		-ap bbsMultiBlendSliderSlider "left" 1 0
		-ap bbsMultiBlendSliderSlider "right" 1 100
		
		-ac $btn1 "top" 1 bbsMultiBlendSliderSlider -ap $btn1 "left" 1 0 -ap $btn1 "right" 1 20
		-ac $btn2 "top" 1 bbsMultiBlendSliderSlider -ap $btn2 "left" 1 20 -ap $btn2 "right" 1 40
		-ac $btn3 "top" 1 bbsMultiBlendSliderSlider -ap $btn3 "left" 1 40 -ap $btn3 "right" 1 60
		-ac $btn4 "top" 1 bbsMultiBlendSliderSlider -ap $btn4 "left" 1 60 -ap $btn4 "right" 1 80
		-ac $btn5 "top" 1 bbsMultiBlendSliderSlider -ap $btn5 "left" 1 80 -ap $btn5 "right" 1 100
		bbsMultiBlendSliderForm;
    
    window -e -w 215 -h 72 $win;
    showWindow $win;
}
global proc bbsMultiBlendSlide(int $undo) {
//gets the value of the slider and uses bbsMultiBlendSet

    float $val = `floatSliderGrp -q -v bbsMultiBlendSliderSlider`;
	bbsMultiBlendSet($val, $undo, 1);
}

global proc bbsMultiBlendSet(float $val, int $undo, int $fromSlider) {
	
	if (!$fromSlider) {
		//if the value came from the slider, we don't want to do this
		floatSliderGrp -e -v $val bbsMultiBlendSliderSlider;
	}
    
    string $selList[] = `ls -sl`;
    if (!size($selList))
		return;
    
    undoInfo -swf $undo;
	
    for ($obj in $selList) {
		
		//check if they're targets
        $objBS = `bbsGetTargetBlend $obj`;
        if (`objExists($objBS+"."+$obj)`) {
			if ($undo) {
				evalEcho("setAttr "+$objBS+"."+$obj+" "+$val);
			} else {
				setAttr ($objBS+"."+$obj) $val;
			}
			//found that it was a target, so go to the next loop
			continue;
		}
		
		//check if they're base heads
		string $blendShapes[] = `bbsGetBlendShapes $obj`;
		if (!size($blendShapes)) {
			if (`nodeType $obj` == "blendShape") {
				$blendShapes[0] = $obj;
			}
		}
		
		//one way or another, if a base or blendshape is selected, the list size will be > 0
		if (size($blendShapes)) {
			string $bs = $blendShapes[0];
			string $blendAttrs[] = `bbsGetBlendAttrs $bs`;
			for ($attr in $blendAttrs) {
				if ($undo) {
					evalEcho("setAttr "+$bs+"."+$attr+" "+$val);
				} else {
					setAttr ($bs+"."+$attr) $val;
				}
			}
		}
    }
	
	undoInfo -swf $undo;
}


global proc bbsMultiBlendKey() {
//keys the blendshape values of the selected objects

    //undo should only be enabled on release, otherwise the queue will be flooded
    string $selList[] = `ls -sl`;
    if (!size($selList)) return ;
    
    for ($obj in $selList) {
        $objBS = `bbsGetTargetBlend $obj`;
    
        if (!`objExists($objBS+"."+$obj)`) continue ;
        evalEcho("setKeyframe "+$objBS+"."+$obj);
    }
}
//====================================================================================================




//====================================================================================================
//ADD INBETWEEN WINDOW
global proc bbsAddInbetween() {
    string $bbsAIWin = "bbsAIWin";
    if (`window -exists $bbsAIWin`) deleteUI -wnd $bbsAIWin;

    //create window
    window  -w 100 -h 100 -rtf 1 -mb 1 -mnc "window -e -t \"Add Blend Shape Inbetween Target\" bbsAIWin;" -t "Add Blend Shape Inbetween Target" bbsAIWin;

    menu -l "Refresh" bbsAIEditMenu;
        menuItem -l "All" -c "bbsAIGetBlends; bbsAIGetBlendTargets;" bbsAIRefreshItem;

    formLayout -nd 100 bbsAIFormMain;

    //main forms column
    columnLayout -adj 1 bbsAIColumnMain;
        columnLayout -w 500 -h 70 bbsAIColumnBlendShape;
            rowLayout -nc 2 -cw2 160 300 -cl2 "right" "left";
                text -w 160 -l "BlendShape node:  ";
                columnLayout ;
                    checkBox -v 1 -l "Automatic"
                        -cc ("if (!`checkBox -q -v bbsAIBlendShapeCheck`) {\
                                checkBox -e -en 1 bbsAITargetCheck;\
                                optionMenu -e -vis 1 bbsAIBlendShapeOptionMenu;\
                            } else {\
                                checkBox -e -en 0 -v 1 bbsAITargetCheck;\
                                optionMenu -e -vis 0 bbsAIBlendShapeOptionMenu;\
                                optionMenu -e -vis (`checkBox -q -v bbsAITargetCheck` ? 0 : 1) bbsAITargetOptionMenu;\
                                textField -e -vis (`checkBox -q -v bbsAITargetCheck` ? 0 : 1) bbsAITargetField;\
                                text -e -l \"Select inbetweens, then the target...\" bbsAITipText;\
                            } bbsAIGetBlends;")
                        bbsAIBlendShapeCheck;
                    optionMenu -vis 0 -cc "bbsAIGetBlendTargets" bbsAIBlendShapeOptionMenu;
                    setParent bbsAIColumnMain;
    
        separator -h 8;
        columnLayout -w 500 -h 70 bbsAIColumnTarget;
            rowLayout -nc 3 -cw3 160 80 220 -cl3 "right" "left" "left";
                text -w 160 -l "Target name:  ";
                columnLayout ;
                    checkBox -en 0 -v 1 -l "Automatic"
                        -cc "optionMenu -e -vis (`checkBox -q -v bbsAITargetCheck` ? 0 : 1) bbsAITargetOptionMenu;\
                            textField -e -vis (`checkBox -q -v bbsAITargetCheck` ? 0 : 1) bbsAITargetField;\
                            bbsAIGetBlendTargets;\
                            if (`checkBox -q -v bbsAITargetCheck`) {\
                                text -e -l \"Select inbetweens, then the target...\" bbsAITipText;\
                            } else {\
                                text -e -l \"Select inbetweens only...\" bbsAITipText;\
                            }"
                        bbsAITargetCheck;
                    textField -vis 0 -w 280 bbsAITargetField;
                    optionMenu -vis 0 -acc -cc "bbsAISetBlendTarget" bbsAITargetOptionMenu;
                    setParent bbsAIColumnMain;
    
        separator -h 8;
        columnLayout -w 500 -h 70 bbsAIColumnWeights;
            rowLayout -nc 3 -cw3 160 80 220 -cl3 "right" "left" "left";
                text -w 160 -l "Inbetween weights:  ";
                columnLayout ;
                    checkBox -v 1 -l "Automatic" -cc "floatSliderGrp -e -vis (`checkBox -q -v bbsAIInbetweenCheck` ? 0 : 1) bbsAIInbetweenSlider;" bbsAIInbetweenCheck;
                    floatSliderGrp -vis 0 -field 1 -min 0 -max 1 -v .5 -step .01 -cw2 40 300 bbsAIInbetweenSlider;
                    setParent -top;
    
    //status text
    text -w 500 -al "left" -fn "boldLabelFont" -l "Select inbetweens, then the target..." bbsAITipText;
    
    //buttons
    button -h 26 -l "Apply and Close" -c "bbsAIApply(0); deleteUI -wnd bbsAIWin" bbsAIApplyAndCloseBtn;
    button -h 26 -l "Apply" -c "bbsAIApply(0)" bbsAIApplyBtn;
    button -h 26 -l "Close" -c "deleteUI -wnd bbsAIWin" bbsAICloseBtn;

    formLayout -edit
        -af		bbsAIColumnMain	"top"	5
        -af		bbsAIColumnMain "left"	5
        -af		bbsAIColumnMain	"right"	5
    
        -af		bbsAIApplyAndCloseBtn	"bottom"	5
        -ap		bbsAIApplyAndCloseBtn	"left"	5 0
        -ap		bbsAIApplyAndCloseBtn	"right"	2 33
    
        -af		bbsAIApplyBtn	"bottom"	5
        -ap		bbsAIApplyBtn	"left"	2 33
        -ap		bbsAIApplyBtn	"right" 2 66
    
        -af     bbsAITipText    "bottom" 36
        -af     bbsAITipText    "left"  5
    
        -af		bbsAICloseBtn	"bottom" 5
        -ap		bbsAICloseBtn	"left"	2 66
        -ap		bbsAICloseBtn	"right"	5 100
    bbsAIFormMain;
    
    
    window -e -w 548 -h 384 $bbsAIWin;
    showWindow $bbsAIWin;
    }
    global proc bbsAIGetBlends() {
    //get blend shapes
    string $curItems[] = `optionMenu -q -ill bbsAIBlendShapeOptionMenu`;
    for ($i = size($curItems)-1; $i >= 0; $i--) {
        deleteUI -mi $curItems[$i];
    }

    $blends = `ls -type blendShape`;
    if (size($blends) > 0) {
        for ($bs in `ls -typ blendShape`) {
            menuItem -p bbsAIBlendShapeOptionMenu -l $bs;
        }
    }
    
    bbsAIGetBlendTargets;
}
global proc bbsAIGetBlendTargets() {
    //get blend shape targets
    string $curItems[] = `optionMenu -q -ill bbsAITargetOptionMenu`;
    for ($i = size($curItems)-1; $i >= 0; $i--) {
        deleteUI -mi $curItems[$i];
    }

    if (`optionMenu -q -ni bbsAIBlendShapeOptionMenu` > 0) {
        string $blendShape = `optionMenu -q -v bbsAIBlendShapeOptionMenu`;
        $blendAttrs = `bbsGetBlendAttrs($blendShape)`;
        $blendAttrs = `sort $blendAttrs`;
        for ($attr in $blendAttrs) {
            menuItem -p bbsAITargetOptionMenu -l $attr;
        }
    }
    bbsAISetBlendTarget;
}
global proc bbsAISetBlendTarget() {
    textField -e -tx "" bbsAITargetField;
    
    if (!`optionMenu -q -ni bbsAITargetOptionMenu`) return ;
    string $name = `optionMenu -q -v bbsAITargetOptionMenu`;
    textField -e -tx $name bbsAITargetField;
}



//quick proc for all-auto (don't need window!)
global proc bbsAddInbetweenAuto() {
    bbsAIApply(1);
}
global proc bbsAIApply(int $allAuto) {
    //get information
    int $blendAuto = 1;
    int $targetAuto = 1;
    int $weightsAuto = 1;
    
    if (!$allAuto && `window -ex bbsAIWin`) {
        $blendAuto = `checkBox -q -v bbsAIBlendShapeCheck`;
        $targetAuto = `checkBox -q -v bbsAITargetCheck`;
        $weightsAuto = `checkBox -q -v bbsAIInbetweenCheck`;
    }
    
    string $blendShape[], $blendInbs[], $blendBase, $blendTarget;
    int $index;
    float $weights;
    string $selList[] = `ls -sl`;
    if (!size($selList)) {
        error "nothing selected";
        return;
    }
    
    if ($targetAuto) {
        $blendTarget = $selList[size($selList)-1];
        $blendInbs = $selList;
        $blendInbs = stringArrayRemove ({$blendTarget}, $blendInbs);
    } else {
        $blendTarget = `textField -q -tx bbsAITargetField`;
        $blendInbs = $selList;
    }
    
    //blendshape
    if ($blendAuto) {
        string $objShape[] = `listRelatives -c -s $blendTarget`;
        $blendShape = `listConnections -t blendShape -s 0 $objShape[0]`;
    } else {
        if (`optionMenu -q -ni bbsAIBlendShapeOptionMenu` == 0) {
            error ("No blend shape specified");
            return ;
        }
        $blendShape[0] = `optionMenu -q -v bbsAIBlendShapeOptionMenu`;
    }

    //do some error checking
    if ($blendShape[0] == "" && $blendAuto) {
        error ("target '"+$blendTarget+"' is not hooked up to a blendshape");
        return ;
    }
    if ($blendTarget == "") {
        error ("No target specified");
        return ;
    }
    if (!`objExists $blendTarget`) {
        error ("target '"+$blendTarget+"' does not exist");
        return ;
    }
    
    //get base
    $connections = `blendShape -q -g $blendShape[0]`;
    $connections = `listRelatives -p -f $connections[0]`;
    $blendBase = $connections[0];
    
    //get the target index
    $index = `bbsGetBlendTargetIndex $blendShape[0] $blendTarget`;
    if ($index == -1) {
        error ("target '"+$blendTarget+"' is not hooked up to '"+$blendShape[0]+"'");
        return ;
    }
    
    //get weights
    if ($weightsAuto) {
        $weights = (float)1/(size($blendInbs)+1);
    } else {
        $weights = `floatSliderGrp -q -v bbsAIInbetweenSlider`;
    }
    
    string $command = "blendShape -e -ib ";
    for ($i = 0; $i < size($blendInbs); $i++) {
        float $thisWeight = floor(($weights * ($i+1))*1000)/(float)1000;
        $command += ("-t "+$blendBase+" "+$index+" "+$blendInbs[$i]+" "+$thisWeight+" ");
    }
    $command += (""+$blendShape[0]);
    
    evalEcho ($command);
}
//====================================================================================================




//====================================================================================================
//HELPER PROCEDURES FOR ALL BLENDSHAPE STUFF


global proc bbsRec_buildShape(string $base, float $pointArray[], string $compArray[]) {
//rebuilds a shape off of an original shape and a pointArray-compArray combination

	if (!`objExists $base`)
		error "bbsRec_buildShape: no base shape was passed. cannot recreate blend shape";
	if (!size($pointArray))
		error "bbsRec_buildShape: no point array was passed. cannot recreate blend shape";
	if (!size($compArray))
		error "bbsRec_buildShape: no component array was passed. cannot recreate blend shape";
	
	//get the base shape
	string $baseShape;
	if (1) {
		string $buffer[] = `listConnections -c -s $base`;
		if (!size($buffer))
			return;
		$baseShape = $buffer[0];
	}
	
	//evaluate if the base shape is mesh
	if (`nodeType $baseShape` != "mesh")
		error "bbsRec_buildShape: the base shape was not of type mesh";
	
	//get the mel command by using python to evaluate each vertices movement
	python("import boBlendShapes");
	python("#reload(boBlendShapes)");
	
}

global proc string[] bbsGetBlendShapes( string $base) {
//get all blendshape nodes attached to a base (transform)

    if (!`objExists $base`) return {};
    string $baseShape[] = `listRelatives -s -c $base`;
    if (!size($baseShape)) return {};
    
    string $blendShapes[] = `listConnections -d 0 ($baseShape[0]+".inMesh")`;
    if (!size($blendShapes)) return {};
    $blendShapes = {$blendShapes[0]};
    
    $hasConnect = 1;
    while($hasConnect) {
        string $tempCon[] = `listConnections -d 0 $blendShapes[size($blendShapes)-1]`;
        if (!size($tempCon)) {
            $hasConnect = 0;
        } else {
            $blendShapes[size($blendShapes)] = $tempCon[0];
        }
    }
    for ($i = size($blendShapes)-1; $i >=0; $i--) {
        string $type[] = `ls -st $blendShapes[$i]`;
        if ($type[1] != "blendShape") {
            $blendShapes = stringArrayRemove({$blendShapes[$i]}, $blendShapes);
        }
    }
    
    return $blendShapes;
}

global proc string[] bbsGetBlendAttrs(string $blendShape) {
//get all blendshape attributes of a certain blendshape node

    if (!`objExists $blendShape`) return {};
    string $weights[] = `listAttr -m ($blendShape+".w")`;
    return $weights;
}

global proc float[] bbsGetBlendValues(string $blendShape, int $index) {
//get all blendshape values of a blendshape attribute

    if (!`objExists $blendShape`) return {};
    string $valuesStr[] = `listAttr -m ($blendShape+".inputTarget[0].inputTargetGroup["+$index+"]")`;
    stringArrayRemoveAtIndex(0, $valuesStr);
    int $valueLen = size($valuesStr);
    float $values[] = {};
    //remove and isolate number
    for($i = ($valueLen-1); $i >= 0; $i--) {
        if (($i%4) != 0) {
            stringArrayRemoveAtIndex($i, $valuesStr);
        } else {
            $valuesStr[$i] = `substring $valuesStr[$i] (size($valuesStr[$i])-4) (size($valuesStr[$i])-1)`;
            $valuesStr[$i] = (float($valuesStr[$i])-5000)/1000;
        }
    }
    for ($i = 0; $i < size($valuesStr); $i++) {
        $values[$i] = float($valuesStr[$i]);
    }
    return $values;
}

global proc string bbsGetBlendTarget(string $blendShape, int $index, float $weight) {
//get the object in the scene that corresponds to a blendshape attribute at a certain weight

    if (!`objExists $blendShape`) return "";
    string $inAttr = ($blendShape+".inputTarget[0].inputTargetGroup["+$index+"].inputTargetItem["+($weight*1000+5000)+"].inputGeomTarget");
    string $blendTargets[] = `listConnections -t shape -d 0 $inAttr`;
    
    return $blendTargets[0];
}

global proc int bbsGetBlendTargetIndex(string $blendShape, string $target) {
//get the targets index

    if (!`objExists $blendShape`) return -1;
    string $weights[] = `listAttr -m ($blendShape+".w")`;
    for ($i = 0; $i < size($weights); $i++) {
        if ($target == `bbsGetBlendTarget $blendShape $i 1`) {
            return $i;
        }
    }
    return -1;
}


global proc string bbsGetTargetBlend(string $target) {
//get the blendshape that corresponds to a target shape

    string $targetShape[] = `listRelatives -c -s $target`;
    if (!size($targetShape)) return "" ;
    string $targetBS[] = `listConnections -t blendShape -s 0 $targetShape[0]`;
    //$targetBS[0] is the blendshape node
    if (!size($targetBS)) return "" ;
    
    return $targetBS[0];
}
//====================================================================================================